Making the most of the serial flash EEPROM
------------------------------------------

Nearly all FPGA boards have some form of EEPROM on them. These are used to provide design persistance, which allows the FGPA to be configured with the same image each time the power is applied.

One of the little documented 'tricks' is storing your own data inside this EEPROM - it is a very useful trick as it allows you to escape restriction that all data be held in the ebedded block RAM. It also allows for the inclusion of custom data to be added to an FPGA project without need for the entire Xilinx development kit to be installed.

The uses for this are virtually endless. For example, if you are working with an embedded processor it would be standard practice to include a small bootstrap program in embedded Block RAM that would download a larger program out of the serial flash. The time required to develop this infrastruture will be rewarded many times over as it allows very rapid updating of the program code during the software development cycle.


Adding your data to the bitstream
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

There are two parts doing this - including your own data in the '.bit' file is the trickiest, and then reading it back from the flash is realtively simple.

This python script takes the original 'bit' file and updates the bitstream to include the the binary data from the second file on the command line. (You will need Python 2.7 installed for it to run)

[source,py]
--------------------------------------  
#!/usr/bin/env python
# To run this script, use Python version 2.7 not version 3.x
#
# usage: pymerge <bitfile.bit> <binaryfile>
#
import argparse
import struct
from ctypes import create_string_buffer 

#Standard FLASH size of 4Mbits

# Settings for a Spartan 6 LX9 + SST25VF040B (Papilio Plus)
# bit_size = 348160
# flash_size = 4*1024*1024/8

# Settings for a Spartan 3E 250 + (Papilio One 250)
bit_size = 169314
flash_size = 4*1024*1024/8

# Settings for a Spartan 3E 250 + (Basys2-250)
bit_size = 169314
flash_size = 4*1024*1024/8

#sector size to align to
sect_size = 0x300

parser = argparse.ArgumentParser(description='Concatenates an FPGA .bit file and a user supplied binary file together.\nProduces a valid .bit file that can be written to a platform flash using\nstandard tools.')
parser.add_argument('ifile', type=argparse.FileType('rb'), help='source FPGA .bit file')
parser.add_argument('bfile', type=argparse.FileType('rb'), help='source binary file')
parser.add_argument('ofile', type=argparse.FileType('wb'), help='destination merged FPGA .bit + binary file')
args = parser.parse_args()

#seek to end
args.bfile.seek(0,2)
#get size of user binary file to merge
bsize = args.bfile.tell()
#seek to start
args.bfile.seek(0,0)

data = args.ifile.read(2)
args.ofile.write(data)
(length,) = struct.unpack(">H", data)
assert length == 9, "Invalid .bit file magic length."

#check bit file magic marker
data = args.ifile.read(length)
args.ofile.write(data)
(n1,n2,n3,n4,n5,) = struct.unpack("<HHHHB", data)
assert n1==n2==n3==n4==0xF00F, "Invalid .bit file magic marker"

data = args.ifile.read(2)
args.ofile.write(data)
(length,) = struct.unpack(">H", data)
assert length==1, "Unexpected value."

#loop through the bit file sections 'a' through 'd' and print out stats
section=""
while section != 'd':
	section = args.ifile.read(1)
	args.ofile.write(section)
	data =  args.ifile.read(2)
	args.ofile.write(data)
	(length,) = struct.unpack(">H", data)
	desc = args.ifile.read(length)
	args.ofile.write(desc)
	print "Section '%c' (size %6d) '%s'" % (section, length, desc)

#process section 'e' (main bit file data)
section = args.ifile.read(1)
args.ofile.write(section)
assert section=="e", "Unexpected section"
data =  args.ifile.read(4)
#this is the actual size of the FPGA bit stream contents
(length,) = struct.unpack(">L", data)
print "Section '%c' (size %6d) '%s'" % (section, length, "FPGA bitstream")
#we can't merge a "merged" file, well..., we could, but we won't
assert length<=bit_size, "Section 'e' length of %d seems unreasonably long\nCould this file have already been merged with a binary file?" %length

length_aligned = (length + sect_size) & 0xffffff00
padding = length_aligned - length
print "Padding with %x bytes to align user data with sector" %padding

#check that both files will fit in flash
assert (length_aligned+bsize) <= flash_size, "Combined files sizes of %d would exceed flash capacity of %d bytes" % ((length_aligned+bsize), flash_size)
print "Merged user data begins at FLASH address 0x%06X" %length_aligned

#write recalculated section length
data = struct.pack(">L", length_aligned+bsize)
args.ofile.write(data)

#read FPGA bitstream and write to output file
data = args.ifile.read(length)
args.ofile.write(data)

#write padding to align user ROM to flash sector start
pad = create_string_buffer(padding) 
args.ofile.write(pad)

#read user provided binary data and append to file
data = args.bfile.read(bsize)
args.ofile.write(data)

#close up files and exit
args.ifile.close()
args.bfile.close()
args.ofile.close()
--------------------------------------  

One merged, the bit file should download to flash just like any other \'.bit\' file, and the existing design will run fine.

Accessing the data from the flash
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The interface for the Serial Flash is like the SPI interface for the LogicStart's ADC, although the protocol is far more advanced.

For us we only need to know one command - the high speed read. To issue this command the flash is activated and a series of bytes are sent out in MSB first format

*  0B - the high speed read command
*  hh - the highest byte of the address
*  mm - the middle byte of the address
*  ll - the lowest byte of the address
*  xx - a 'dummy' byte

Once this command is sent any additional clocks will retreive the data from the flash.

Here is the project that reads the first byte following the bitstream

[source,vhdl]
--------------------------------------
--------------------------------------
