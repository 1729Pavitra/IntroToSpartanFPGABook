Your first project
------------------

Getting the first design to work is always the hardest part. In
this chapter we will \'virtually' wire two switches up to two LEDs.

On finishing this chapter you will have:

- Created a new project
- Created a new VHDL module
- Entered basic code
- Implemented the design
- Set what I/O pins will be connected to which internal signals
- Implemented the design again
- Used the hardware programming tool for your board
- Tested the design in hardware

Wow! That is a lot of learning for one sitting!

Step 1 - Create a new Project
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is pretty much a "follow your nose" task, however the
target devices sttings must exactly match the FPGA you are using. 

- Click on "Xilinx ISE Design Suite 13.3 Studio" icon
- From the "File" menu, choose "New Project"
- Name the project "Switches_LEDs", and click on "Next".

image:first-project/m2p1.png[width="300",align="center"]

- This is the screen where you say what FPGA device you are using. Choose
the following settings to tell the design tools what chip you are using
(I'm using the 250,000 gate count - if you are using a different one then
select xc3s100e or xc3s500e), then press the  "Next" button.

[NOTE]
.For the Papilio One 250
=======================================
image:first-project/m2p2p.png[width="300"]
=======================================

[NOTE]
.For the Basys2 250
=======================================
image:first-project/m2p2b.png[width="300"]
=======================================

- Click on "Next", then click on "Finish" to create and open the new project

Step 2 - Create a new VHDL Module
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Right-click on the design window, on the FPGA device, and choose "New Source"

image:first-project/m2p3.png[width="200"]

- Highlight "VHDL module" and in the file name enter "Switches_LEDs", then press the "Next" button

- This dialog box allows you to define what connections the module has. We
need four connections - two for the switches and two for the LEDs:

image:first-project/m2p4.png[width="200"]

- Click the "Next" button, then "Finish" to create the module and open it in
the editor. To make things clearer, delete any line that starts with "--" - they
are just comments that do not influence the design.
 
[source,vhdl]
-------------------------------------
 library IEEE;
 use IEEE.STD_LOGIC_1164.ALL;
 
 entity Switches_LEDs is
   Port ( switch_0 : in  STD_LOGIC;
          switch_1 : in  STD_LOGIC;
          LED_0 : out  STD_LOGIC;
          LED_1 : out  STD_LOGIC);
 end Switches_LEDs;
 
 architecture Behavioral of Switches_LEDs is
 begin
 
 end Behavioral;
-------------------------------------


As you can see, it has created the definition for an entity called Switches_LEDs, 
with two inputs and two outputs - STD_LOGIC is used to indicate what values these
inputs and outputs can have.

The architecture section is where you describe how the internal logic of the module
actually works. For this project we use the "assignment" operator ("<=") to assign
the LEDs the values of the switches:

[source,vhdl]
-------------------------------------
 library IEEE;
 use IEEE.STD_LOGIC_1164.ALL;
 
 entity Switches_LEDs is
   Port ( switch_0 : in  STD_LOGIC;
          switch_1 : in  STD_LOGIC;
          LED_0    : out STD_LOGIC;
          LED_1    : out STD_LOGIC);
   end Switches_LEDs;
 
 architecture Behavioral of Switches_LEDs is
 begin
   LED_0 <= switch_0;
   LED_1 <= switch_1;
 end Behavioral;
-------------------------------------


If you press the green "play" arrow in the middle left of the design 
window the project should start building.

If your code has been entered successfully the project will build 
without any errors, and the design Window will now look like this:

image:first-project/m2p5.png[]

Great! You've built your first design! There is only one problem, and
that is we haven't told the design tools which pins to connect these signals to.

Step 3 - Creating constraints
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To tell the tools which physical pins should be connected to the 
VHDL inputs and outputs we need an "Implementation Constraints File".
Here's how you add one:

* From the "Project Menu" choose "New Source"

* Select "Implementation Constraints File" and call it "constraints":

image:first-project/m2p6.png[width=300]

* Click "Next" and "Finish"

* In the design window, a small "+" will appear by the Switches_LEDs
module. Click that to show the new file:

image:first-project/m2p7.png[]


* Double-click "constraints.ucf" to open it in the editor window

* Add the following lines, which assign locations to the four wires, 
and instructs the tools to create a design that uses "Low Voltage
Transistor Transistor Logic" signal levels:

[source,ucf]
-------------------------------------
 # Constraints for Papilio One
 NET switch_1 LOC = "P3"  | IOSTANDARD=LVTTL;
 NET switch_0 LOC = "P4"  | IOSTANDARD=LVTTL;
 NET LED_1    LOC = "P16" | IOSTANDARD=LVTTL;
 NET LED_0    LOC = "P17" | IOSTANDARD=LVTTL;
-------------------------------------

[source,ucf]
-------------------------------------
 # Constraints for Basys2
 NET switch_1 LOC = "L3"  | IOSTANDARD=LVTTL;
 NET switch_0 LOC = "P11" | IOSTANDARD=LVTTL;
 NET LED_1    LOC = "M11" | IOSTANDARD=LVTTL;
 NET LED_0    LOC = "M5"  | IOSTANDARD=LVTTL;
-------------------------------------

Save the changes to this file, and then once again click
on the Green arrow to build the design. 

If that is successful, double-click on "Generate Programming File":

image:first-project/m2p8.png[]

You will now have a '.bit' file in the project directory
that can be used to program the FPGA!

Step 4 - Downloading the design into the device
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[NOTE]
.For the Papilio One:
==================================
* Connect your board to the USB port

* In Windows Explorer navigate to the project directory and find the "Papilio Bit File"

image:first-project/m2s10ap.png[width=300]

* Double-click on the file. It will bring up the following Window:

image:first-project/m2s10bp.png[width=300]

* Just press enter

* The design will be downloaded, and then the board will be configured with your design
================================

[NOTE]
.For the Basys2:
================================
* Connect your board to the USB port

* Launch Digilent's Adept software

* If the device isn't automatically detected, click on the 
"Device manager" and add it to the device table. 

image:first-project/m2s10ab.png[width=300]

* Use the browse button to search for your project's .bit file

* Press the program button, and ignore the warnings about the JTAG clock

* The design will be downloaded, and then the board will be configured with your design

image:first-project/m2s10bb.png[width=300]
================================

As you move the two rightmost slide switches the two rightmost LEDs should turn off and on. Well done!

Viewing how your design has been implemented
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

I find it interesting to see what the software tools make of my designs. 

If you are keen you are able to view how your design is implemented within
the FPGA at three different levels - Register Transfer, Technology and the Routed Design.

You can find the options to view buried away in the process tree:

image:first-project/m2s11.png[scalewidth="50%"]

Here are a few screen shots from some designs:

* The Register Transfer Level ('RTL') Schematic, which shows
how all your design-level components are connected:

image:first-project/m2s12.png[scalewidth="50%"]

* The Technology Schematic, which shows how the individual
components within the FPGA are connected:

image:first-project/m2s13.png[scalewidth="50%"]

* The Routed Design, which shows the physical locations 
and interconnects that are used on the FPGA chip:

image:first-project/m2s14.png[scalewidth="50%"]
