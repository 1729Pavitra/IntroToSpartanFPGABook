Introduction
------------
Hi! I'm Mike Field (aka hamster@snap.net.nz). I want to help hackers take the 
plunge, purchase an FPGA development board and get their first projects up
and running - but not starting at the "System on a Chip" level,
but really understanding the low level detail.

I grew up in the 80s, when the 8-bit computer scene was happening, and on the
back of my VIC 20 was an edge connector where you could attach 'stuff'. Armed 
with vero-board and a soldering iron I made a few interfaces, but my designs
soon got larger than my pocket money could support.

On my way to becoming a professional programmer I toyed with digital logic
and what was then called microelectronics - designing with simple logic 
chips on a solder-less breadboard, and spent many evenings with graph
paper sketching out and trying designs - some up to the scale of small CPUs.

In the late 90s and early 2000s micro-controllers with flash memory came on the 
scene, and I returned to playing with them as a hobby - they were cheap, 
relatively powerful and very accessible. But in the back of my mind was the
graph paper designs of my late teenage years - I wanted to design the CPU,
not just use it.

One day while reading Slashdot I stumbled onto FPGAs I was hooked.

I'm hoping that this book will inspire a person with far better ideas
than me to create something really cool. Hopefully you are that person!

And what are FPGAs?
~~~~~~~~~~~~~~~~~~~
Field Programmable Gate Arrays are in essence a chip full of digital logic (and other
bits and pieces) where the connections between the components has not't been decided upon
at time of manufacture. Software tools are used to generate "configuration files" that 
contain the connections and initial values of all the components, which can then be
downloaded to the FPGA. 

The distinguishing feature from other technology is that (usually) the designs are
completely 'soft'. If power is removed you have a blank FPGA that can then be 
programmed with a different design (although most FPGAs can automatically download
the design from a FLASH ROM chip, giving design persistance).

FPGAs first came to market in the late 80s. Initially they were seen as a very large
PALs (Programmable Logic Arrays). During the early 90s their increasing size and 
flexibility allowed them to be used in networking and telecommunications applications.
FPGAs allow the separation between the hardware design and the logic design they 
allowed vendors to quickly engineer solutions without the expense and time required 
to commission Application Specific Integrated Circuits (ASICs).

During the late 90s FPGAs started being used everywhere, replacing ASICs or enabling
the use of advanced algorithms in consumer and industrial products - for example the
system monitoring the data center where I work is based around an Xilinx FPGA,
and Xilinx FPGAs are used inside some HP storage subsystems I use.

In the 2000s educational institutes began to pick up on using FPGAs in their 
digital design courses, and vendors were keen to supply them with development boards knowing 
that familiarity with the technology would help develop their markets.
These boards (and their design software) are now available to the hobbyist community, 
and for what it used to cost of a solder-less breadboard, power supply and a few ICs 
you can have the equivalent of hundreds of thousands discrete logic chips to play with.

What to calculate MD5 check-sums in hardware? Sure! Want to implement an arcade game off
the schematics? Why not! Design your own CPU? You can do that too - actually you can 
design a complete computer if you really want. With one of these development boards
you have more resources than a corporation could muster 20 years ago!


Why learn to use FPGAs? 
-----------------------

For electronics and micro-controller buffs, the programmable logic on an 
FPGA is the next step closer to "real hardware", and the interfacing 
possibilities are endless - with the right FPGA you can
talk to pretty much anything (DVI, HDMI, Fibre Channel, LVDS, PCIe, LVCMOS, LVTTL).

Unlike when working with chips and wires the designing, prototyping and 
debugging of designs is very fast. In the past designing and building complex
designs used graph paper, discrete logic chips, breadboards and jumper
wires making it a slow and tedious process. But not with FPGAs, after updating 
your design all you have to do is press the "implement" button. 

As well as being fast use, designing and prototyping hardware is cheap - a
mid-range laptop and an FPGA development board is all you need for designs
that would cost tens of thousands of dollars to build with discrete logic.
For hobbyists, the best part is that when you have finished with one design,
you can just reuse your development board for your next project!

What will you learn?
~~~~~~~~~~~~~~~~~~~~
When you reach the end of this book you should have achieved the following:

* A working knowledge of a subset of VHDL, enough to complete most projects

* Familiarity with the ISIM simulator, and have used it to debug an issues or two

* Used all the major components on a Spartan-3E FPGA

* You will have also used nearly all the interfaces on your chosen 
development board.

* Transferred data to a project on a FPGA over the USB host port, which
is an often overlooked in other books!

* You may have even built a few custom interfaces that are not on the board

These skills will get you well on the way to implementing your own projects such as:

* Servo and motor drivers and sensor interfaces for robotics

* Digital Signal Processing for audio, RF or video work

* Interfacing with the any of the hundreds of low cost sensors that are now
available, such as accelerometers and gyroscopes

* You could even consider building your own CPU

A note to software-coder types
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you are a coder, then your mind is presently wired to think about the
flow of instructions running through a processor, running in a memory space.
It really hurts to escape this mindset but please persist - you will need
to escape it if you are to make the most of FPGAs.

Implementing efficient designs requires very different thinking. In general
memory access is cheap, branches are inexpensive, parallelization is easy,
serialization is hard. You need to be acutely aware of timings at design
time rather than profiling code after implementation looking for hot spots.

When you get confused, the things to remember are:

* You are not writing a program. 

* You are designing something akin to a (Very Very Very Very)VLIW CPU that only has a single instruction. 

* It has the current state vector (stored in flip-flops and registers)

* It uses the current state and any inputs to compute the next state

* When the clock \'ticks\' it then atomically stores this new state into the state vector.

And that is it - there are no loops (well, not in the sense you think of them now),
no "do this then do that", there is no "flow" through the code - it is all concurrent.
There is pretty much only one unit of time - a single tick of a clock signal. It can be quite freaky at times! 

The good thing is that as a result of this mind shift you will start thinking 
more \'super-scalar\', and the mental paradigm that you write your code in a closer
match to the underlying hardware. You may find yourself changing a few small
habits that will improve the quality of your code.

Size of projects that are possible to implement in an FPGA
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A very low end FPGA (e.g. the Spartan 3E - 100 is equivalent to approximately
100,000 logic gates - or 25,000 TTL logic chips. The largest FPGA in the same
product range has 16 times as many logic elements with an \'equivalent gate count\' of 1,600,000 gates.

The easiest way to visualize this is to think in terms of solder-less breadboards. A
40mm x 90mm breadboard can comfortably fit three 7400 series TTL chips and
associated wiring, making the small FPGA equivalent to a 4.0m x 7.2m
array of breadboards, each populated with three TTL logic chips. Large
FPGA equivalent to nearly a basketball court full of breadboards!

Having this much logic allows you to implement pretty much any design you can envisage, 
and makes you appreciate the job that the design software does for you. 

Why VHDL? Why not Verilog
~~~~~~~~~~~~~~~~~~~~~~~~~

Today there are two dominant Hardware Description Languages in use - Verlog and VHDL.
VHDL is based on ADA, is strongly typed and very verbose. Verilog is more like C - loosely
typed with lots of punctuation. Both languages are pretty much equally expressive - anything
you can do one language you can also do in the other - and can even be mixed and matched 
in the same project with far more fluidity than mixing languages in software design.

For me, I find that the explicitness of VHDL makes it more explainable. I'm also from 
outside of the USA - where VHDL seems to be the de facto standard for research and 
industry.  I find Verilog code a bit like Perl. It is quick to write but it feels very
"fast an loose" - sometimes it is very hard to tell what the heck is going on.

But for the size of projects in this course use whatever language you 
like - it is more about the underlying concept than the code.

You won't need it at the moment, but if you want to learn the other 90% of the
VHDL language that is not covered here, snag yourself a copy of  "Free Range VHDL". 
It is available at a web browser near you, at http://www.freerangefactory.org/

