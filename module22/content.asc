Choosing your algorithms
~~~~~~~~~~~~~~~~~~~~~~~~

Now that we have a value from the ADC, it would be nice to be able
to display it in decimal.  Given that we have no divide-by-ten 
'instruction' on the FPGA, how can this be done?

The obvious solution could be to implement binary division by
ten, and use three of them, or maybe a loop the data around three times),

Here are four solutions I came up with. There are most probably
many others that are far better.

We will look at the algorithms in 'C', where their intent will be 
clearer. Some methods that are impractical in software work perfectly
well when implemented in an FPGA.

Using a lookup table
~~~~~~~~~~~~~~~~~~~~
One way could be a ROM with 12 address lines and 16 bit wide data bus, 
using 64 kilobits of RAM resource.  This could be a reasonable solution
if you are not using all of the block RAM, and will run very fast.

One problem with this method is that it doesn't scale well to larger 
values.  Each addtional input bit requires the RAM to have twice as 
many words, and the works need to grow wider too. 

Implementation is pretty trivial, and has been covered in the "flashylights"
project.


Simple count and compare
~~~~~~~~~~~~~~~~~~~~~~~~
By running a BCD counter synchronised with a binary counter the
value can be converted.

This looks worse in 'C' than it does in VHDL, but it is still 
pretty ugly.

[source,c]
----------------------------------------------------------------------
unsigned short method1(int val)
{
  int count = 0;
  char c0,c1,c2,c3;

  count = 0;
  c0 = c1 = c2 = c3 = 0;
  while(count <= 4095)
  {
    count++;
    if(count <= val) {
      if(c0 == 9) {
        c0 = 0;
        if(c1 == 9) {
          c1 = 0; 
          if(c2 == 9) {
            c2 = 0;  
            if(c3 == 0)
              c3 = 0;
            else c3++;
          }
          else c2++;
        }
        else c1++;
      } 
      else c0++;
    }
  }
  return (c3<<12)|(c2<<8)|(c1<<4)|c0;
}
----------------------------------------------------------------------

Somewhat surprisingly, if it meets your needs this is a much better solution than your might expect.

When implemented in an FPGA it should use 28 flipflops (16 for the BCD counter, and 12 for the binary counter).
It will also work acceptibly be should 'val' change during the conversion - it will return a value somewhere within
the range of values.

The downside of this method is that it is very slow, and doesn't scale well. For a 12 bit value it takes upto 4095 cycles to obtain the result, and only one conversion can be in progress at any one time.  Should the input value be extended to 16 bits a value will take 16 times longer to convert.

For projects such as displaying value on the seven segment display this is perfectly acceptable - at 32MHz we can convert around 8000 values per second. If the values were for transfering to a host this would be a very poor match to the hundreds of thousands of samples per second that the ADC can convert.

Bit extraction
--------------

This method is the complete opposite of the previous one - no looping is involved.
The designer has the option to extract all 16 bits at the same time (giving a very 
high levels of logic, and a slow design), or it could be pipelined, with intermediate
values could held in flipflops to allow it to clock much faster.

Here's this method implemented in 'C':

[source,c]
----------------------------------------------------------------------
unsigned short method2(int val)
{
  unsigned short packedDecimal = 0;

  /* Extract the thousand digit */
  if(val >= 4000) { packedDecimal |= 0x4000; val -= 4000; }
  if(val >= 2000) { packedDecimal |= 0x2000; val -= 2000; }
  if(val >= 1000) { packedDecimal |= 0x1000; val -= 1000; }

  /* Extract the hundreds digit */
  if(val >= 800) { packedDecimal |= 0x800; val -= 800; }
  if(val >= 400) { packedDecimal |= 0x400; val -= 400; }
  if(val >= 200) { packedDecimal |= 0x200; val -= 200; }
  if(val >= 100) { packedDecimal |= 0x100; val -= 100; }

  /* Extract the tens digit */
  if(val >= 80) { packedDecimal |= 0x80; val -= 80; }
  if(val >= 40) { packedDecimal |= 0x40; val -= 40; }
  if(val >= 20) { packedDecimal |= 0x20; val -= 20; }
  if(val >= 10) { packedDecimal |= 0x10; val -= 10; }

  packedDecimal |= val;
  return packedDecimal;
}
----------------------------------------------------------------------

The cons of this method is that it doesn't scale very well. It already uses a 
lot of logic, and every extra digit to convert required more!

But if pipelined it is very fast - if this design works at 32MHz it could 
convert 32,000,000 values per second to BCD, far faster than the ADC can 
supply them.

The comprimise solution
~~~~~~~~~~~~~~~~~~~~~~~
Here is a good comprimise algorithm. Entire digits are extracted one at a time,
and the resulting remainder is multiplied by 10 and then feed back into the
same logic to extract extra digits.

This uses a moderate amount of logic, and the the amount of logic grows much
slower as the number of digits for conversion, and the maximum frequency of 
the design has a much more gradual decline.

The design generates digits in "most significant digit order", perfect for
transfering data to external devices, leading zero suppression. At 32MHz it
can covert 8,000,000 samples per second. This is much faster than the ADC performs
conversions, making it a very good soultion.

Here's the 'C' source for this method:

[source,c]
----------------------------------------------------------------------
unsigned short method3(int val)
{
  int i;
  unsigned short packedDecimal;

  /* for each digit */
  for(i = 0; i < 4; i++)
  {
    packedDecimal = packedDecimal << 4;
    if(val >= 8000) { packedDecimal |= 8; val -= 8000; }
    if(val >= 4000) { packedDecimal |= 4; val -= 4000; }
    if(val >= 2000) { packedDecimal |= 2; val -= 2000; }
    if(val >= 1000) { packedDecimal |= 1; val -= 1000; }

    /* Multiply 'val' by 10 */
    val = (val<<3)+(val<<1);

  }
  return packedDecimal;
}
----------------------------------------------------------------------

Project - Displaying decimal
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* Try implementing some of the above methods to display ADC or switch
values on the Seven Segment devices.

* You could multiply the values to scale the 0-4095 to get close to the 0-4999 scale. To do this
  multiply by 5000 then drop the leftmost 12 bits (effectively multiplying by 5000/4096).
